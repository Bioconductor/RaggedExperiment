% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assay-reduce.R
\name{reduceAssay}
\alias{reduceAssay}
\title{Create a reduced representation of ragged assay data.}
\usage{
reduceAssay(x, query, simplify, i = 1, withDimnames = TRUE)
}
\arguments{
\item{x}{\code{RaggedExperiment}}

\item{query}{\code{GRanges} providing regions over which reduction
is to occur.}

\item{simply}{\code{function} accepting arguments \code{score},
    \code{range}, and \code{qrange}:

    \itemize{

        \item{\code{score}} A \code{*List}, where each list element
            corresponds to a cell in the matrix to be returned by
            \code{reduceAssay}. Vector elements correspond to
            ranges overlapping query. The \code{*List} objects
            support many vectorized mathematical operations, so
            \code{simplify} can be implemented efficiently.

        \item{\code{range}} A \code{GRangesList} instance,
            'parallel' to \code{score}. Each element of the list
            corresponds to a cell in the matrix to be returned by
            \code{reduceAssay}. Each range in the element
            corresponds to the range for which the \code{score}
            element applies.

        \item{\code{qrange}} A \code{GRanges} instance with the
             same length as \code{score}, providing the query range
             to which the corresponding scores apply.

    }}
}
\value{
\code{reduceAssay()} returns a matrix() with dimensions
    \code{length(query) x ncol(x)}. Elements contain assay
    values for the ith query range and jth sample, summarized
    according to the function \code{simplify}.
}
\description{
This method transforms \code{assay()} from the default
    (i.e., \code{sparseAssay()}) representation to a reduced
    representation summarizing each original range overlapping
    ranges in \code{query}. Reduction in each cell can be tailored
    to indivdual needs using the \code{simplify} argument.
}
\examples{
x <- RaggedExperiment(GRangesList(
    GRanges(c("A:1-3", "A:4-5", "A:10-15"), score=1:3),
    GRanges(c("A:4-5", "B:1-3"), score=4:5)
))
query <- GRanges(c("A:1-2", "A:4-5", "B:1-5"))

weightedmean <- function(scores, ranges, qranges)
    ## weighted average score per query range
    sum(scores * width(ranges)) / sum(width(ranges))
reduceAssay(x, query, weightedmean)

\dontrun{
    ##
    ## Extended example: non-silent mutations, summarized by
    ## genic region
    ##

    suppressPackageStartupMessages({
        library(TxDb.Hsapiens.UCSC.hg19.knownGene)
        library(org.Hs.eg.db)
        library(GenomeInfoDb)
        library(MultiAssayExperiment)
    })

    ## TCGA Multi-assay experiment to RaggedExperiment
    url <- "http://s3.amazonaws.com/multiassayexperiments/accMAEO.rds"
    download.file(url, fl <- tempfile())
    mae <- readRDS(fl)[, , c("RNASeq2GeneNorm", "CNASNP", "Mutations")]

    ## genomic coordinates
    gn <- genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
    gn <- keepStandardChromosomes(granges(gn), pruning.mode="coarse")
    seqlevelsStyle(gn) <- "NCBI"

    ## reduce mutations, marking any genomic range with non-silent mutation as FALSE
    nonsilent <- function(scores, ranges, qranges)
        any(scores != "Silent")
    re <- as(mae[["Mutations"]], "RaggedExperiment")
    mutations <- reduceAssay(re, gn, nonsilent, "Variant_Classification")

    ## reduce copy number
    re <- as(mae[["CNASNP"]], "RaggedExperiment")
    cn <- reduceAssay(re, gn, weightedmean, "Segment_Mean")
}
}
